Description: >
    Author: Mudathir Lawal / School of Cloud Computing, Udacity; 
    This template deploys the servers and other related infrastructure
    that exist on the Udagram cloud architecture. LastUpdate: 20/04/2020

Parameters:

    EnvironmentName: 
        Description: The name prefixed to resource names to indicate the 
            cloud environment to which they belong.
        Type: String  
    WsAMI:
        Description: The Amazon machine image to be deployed.
        Type: String
    BhAMI:
        Description: The Amazon machine image to be deployed.
        Type: String        
    KeyName1: 
        Description: Udagram web server key pair.    
        Type: String
    KeyName2: 
        Description: Udagram bastion host key pair.    
        Type: String    
    InstanceType1:
        Description: Machine type to be deployed as Udagram/Apache server.
        Type: String
    InstanceType2: # Seperate InstanceType param because any 
        # of them may change later.
        Description: Machine type to be deployed as jump box.
        Type: String             
    DedicatedIP:
      Description: A decicated static pub IP from which we can SSH into our jump box.
      Type: String   
    PublicSubnets:
      Description: The ARNs of the public subnets in both AZ1 and AZ2.
      Type: String       
    MinNosOfInstances:
      Description: The cumulative minimum number of instances in both AZs.
      Type: String         
    MaxNosOfInstances:
      Description: The cumulative maximum number of instances in both AZs.
      Type: String 

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access into load balancer from internet via IGW;
          and allow traffic to exit ONLY to the VPC from the same port 80.
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC-ID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "udagram"
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SBN1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SBN2"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1            
  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install AWS CLI 
          apt-get update -y
          apt-get install unzip awscli -y     
      ImageId: !Sub "${BhAMI}" 
      KeyName: !Sub "${KeyName2}" 
      SecurityGroups:
      - Ref: BastionHostSecGroup
      InstanceType: !Sub "${InstanceType2}" 
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"   
        Ebs:
          VolumeSize: "10"
  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Deny HTTP to host and allow SSH from specified IP only.
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC-ID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub ${DedicatedIP} # Allow connection via SSH only from this IP.
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16       # Allow SSH to resources within VPC.
      - IpProtocol: icmp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16       # Allow ping to resources within VPC.
  BastionAutoScalingGrp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB-SBNs"
      LaunchConfigurationName:
        Ref: BastionLaunchConfig  
      MinSize: '1'
      MaxSize: '2' 
  UdagramS3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This role grants full access to the S3 buckets
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole    
  UdagramS3FullAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: UdagramS3FullAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref UdagramS3FullAccessRole
  # Instace profile for IAM Role name associated with 
  # Udagram/Apache auto scaling EC2 Servers      
  UdagramInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - Ref: UdagramS3FullAccessRole 
  UdagramWebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to hosts via NAT, and SSH from jump box only. 
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPC-ID"
        SecurityGroupIngress: 
        - IpProtocol: tcp   
          FromPort: 80 
          ToPort: 80
          CidrIp: 10.0.0.0/16  # Allow HTTP access only from NAT gateway.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16  # Allow connection via SSH only from bastion host.
        - IpProtocol: icmp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16  # Allow ping from bastion host on port 22 also.
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  UdagramWebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install AWS CLI 
          # Install Apache2 HTTP Server
          # Start Appache2 HTTP Server
          # Copy Udagram app code from s3 bucket & unzip it in /var/www/html
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udagrm/udagram-app.zip .
          unzip -o udagram-app.zip
      ImageId: !Sub "${WsAMI}" 
      KeyName: !Sub "${KeyName1}" 
      SecurityGroups:
      - Ref: UdagramWebServerSecGroup
      InstanceType: !Sub "${InstanceType1}" 
      IamInstanceProfile: !Ref UdagramInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"   
        Ebs:
          VolumeSize: "10"
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRV-SBNs"
      LaunchConfigurationName:
        Ref: UdagramWebServerLaunchConfig  
      MinSize: !Sub ${MinNosOfInstances}
      MaxSize: !Sub ${MaxNosOfInstances}
      HealthCheckGracePeriod: 3600    # Delay health check till servers spin up 
      TargetGroupARNs:
      - Ref: WebAppTargetGroup        
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPC-ID"
      Tags: # Add deregistration delay 
          - Key: deregistration_delay.timeout_seconds
            Value: 3600
          - Key: slow_start.duration_seconds
            Value: 900

Outputs:
  LoadBalancerURL:
    Description: Stores the URL of the application LB
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-LB-URL

