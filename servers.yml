Description: >
    Author: Mudathir Lawal / School of Cloud Computing, Udacity; 
    This template deploys the servers and other related infrastructure
    that exist on the Udagram cloud architecture. LastUpdate: 13/04/2020

Parameters:

    EnvironmentName: 
         Description: The name prefixed to resource names to indicate the 
             cloud environment to which they belong.
         Type: String      

Resources:
    
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http access into load balancer from internet via IGW;
              and allow traffic to exit ONLY to the VPC from the same port 80.
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPC-ID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 10.0.0.0/16
    Apache2WebServerAndBastionSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to hosts and SSH from specified local IP only.
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPC-ID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 192.210.29.70/32   # Allow connection via SSH only from this IP.
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install AWS CLI 
            # Install Apache2 HTTP Server
            # Start Appache2 HTTP Server
            # Copy Udagram app code from s3 bucket & unzip it in /var/www/html
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip

            # Install Docker and run the following updates just in case of future needs
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
            apt-get update
            apt-get install -y docker-ce
            usermod -aG docker ubuntu
        ImageId: ami-005bdb005fb00e791
        KeyName: apex-zone 
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
    WebAppAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRV-SBNs"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: '4'
        MaxSize: '6'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup        
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN1"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN2"
          SecurityGroups:
          - Ref: LBSecGroup
      Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
      ALBListenerRule:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
      WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPC-ID"
          Tags: # Add deregistration delay 
              - Key: deregistration_delay.timeout_seconds
                Value: 3600
              - Key: slow_start.duration_seconds
                Value: 900
